{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { map, switchMap } from \"rxjs/operators\";\nimport * as INPLAY_ACTION from \"../actions/inplay.action\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/http.service\";\nexport let InplayEffect = /*#__PURE__*/(() => {\n  class InplayEffect {\n    constructor(actions, service) {\n      this.actions = actions;\n      this.service = service;\n      this.InplayData = createEffect(() => this.actions.pipe(ofType(INPLAY_ACTION.GET_INPLAY), switchMap(() => this.service.get('exchange/GetInPlaySportEvents').pipe(map(res => res.isSuccess == true && res.data != null ? INPLAY_ACTION.GET_INPLAY_SUCCESS({\n        inplay: res.data\n      }) : INPLAY_ACTION.GET_INPLAY_SUCCESS({\n        inplay: null\n      }))))));\n    }\n\n  }\n\n  InplayEffect.ɵfac = function InplayEffect_Factory(t) {\n    return new (t || InplayEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpService));\n  };\n\n  InplayEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InplayEffect,\n    factory: InplayEffect.ɵfac\n  });\n  return InplayEffect;\n})();","map":null,"metadata":{},"sourceType":"module"}